[project]
name = "weather-regulation-prediction"
version = "2.0.0"
description = "Advanced weather regulation prediction system with machine learning"
authors = [
    {name = "Rubio",email = "100428611@alumnos.uc3m.es"}
]
readme = "README.md"
requires-python = ">=3.12,<3.14"
dependencies = [
    "scikit-learn (>=1.6.1,<2.0.0)",
    "numpy",
    "pandas (>=2.2.3,<3.0.0)",
    "yellowbrick (>=1.5,<2.0)",
    "matplotlib (>=3.10.3,<4.0.0)",
    "requests (>=2.32.3,<3.0.0)",
    "metafora (>=1.1.8,<2.0.0)",
    "pytaf (>=1.2.1,<2.0.0)",
    "keras (>=3.10.0,<4.0.0)",
    "python-metar (>=1.4.0,<2.0.0)",
    "bs4 (>=0.0.2,<0.0.3)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "tensorflow (>=2.19.0,<3.0.0)",
    "pyarrow (>=9.0.0,<21.0.0)",
    "tqdm (>=4.67.1,<5.0.0)",
    "dask (>=2025.5.1,<2026.0.0)",
    "statsmodels (>=0.14.4,<0.15.0)",
    "pytest (>=8.4.0,<9.0.0)",
    "psutil (>=7.0.0,<8.0.0)",
    "seaborn (>=0.13.2,<0.14.0)",
    "jinja2 (>=3.1.6,<4.0.0)",
    "python-pptx (>=1.0.2,<2.0.0)",
    "optuna (>=4.3.0,<5.0.0)",
    "reportlab (>=4.4.1,<5.0.0)",
    "ray[tune] (>=2.46.0,<3.0.0)",
    "plotly (>=6.1.2,<7.0.0)",
    "dash (>=3.0.4,<4.0.0)",
    "mlflow (>=2.10.0,<3.0.0)",
    "joblib (>=1.3.0,<2.0.0)",
    "keras-tuner (>=1.4.0,<2.0.0)",
    "tabulate (>=0.9.0,<0.10.0)",
    "category-encoders (>=2.8.1,<3.0.0)",
    "metar (>=1.11.0,<2.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
black = "^24.3.0"
ruff = "^0.3.5"
isort = "^5.13.0"
mypy = "^1.9.0"
pylint = "^3.1.0"
flake8 = "^7.0.0"
flake8-docstrings = "^1.7.0"
flake8-comprehensions = "^3.14.0"
flake8-bugbear = "^24.2.0"
flake8-simplify = "^0.21.0"
bandit = "^1.7.8"
docformatter = "^1.7.5"
pydocstyle = "^6.3.0"
pyupgrade = "^3.15.0"
autoflake = "^2.3.0"
nbstripout = "^0.7.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pandas-stubs = "^2.1.0"
types-PyYAML = "^6.0.0"
types-requests = "^2.31.0"
types-setuptools = "^69.1.0"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["F401", "F811"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_strict_optional = true
plugins = ["numpy.typing.mypy_plugin"]

[tool.pylint]
max-line-length = 100
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0621",  # Redefining name from outer scope
    "W0212",  # Access to a protected member
    "W0703",  # Catching too general exception
]
extension-pkg-whitelist = ["numpy", "pandas", "sklearn", "tensorflow", "keras"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601", "B602", "B607"]

[tool.docformatter]
recursive = true
wrap-summaries = 100
wrap-descriptions = 100
blank = true
